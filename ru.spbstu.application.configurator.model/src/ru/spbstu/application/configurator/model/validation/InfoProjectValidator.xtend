/*
 * generated by Xtext 2.14.0
 */
package ru.spbstu.application.configurator.model.validation

import org.eclipse.xtext.validation.Check
import ru.spbstu.application.configurator.model.infoProject.Include
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Path


/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class InfoProjectValidator extends AbstractInfoProjectValidator {
		
	@Check
	def checkFileExisting(Include include) {
		val myfiles = include.getFiles();
		for (a:myfiles){
			val platformString = include.eResource.URI.toPlatformString(true);
            val myFile = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(platformString));
            val proj = myFile.getProject();  
            val changedFile = Utils.changeString(a);
            val fullPath = Utils.checkFolder(changedFile,"config/");
            val shouldExistsFile = proj.getFile(fullPath);
            if (!shouldExistsFile.exists) {
			error('File ' + shouldExistsFile.toString() +' has not been found', include, null)
		}
	}
		
	}
	@Check
	def compareYamlProperties(Include include) {
		val platformString = include.eResource.URI.toPlatformString(true);
        val myFile = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(platformString));
        val proj = myFile.getProject();  
        val yamlFile = proj.getFile("config/configuration.yml");
        val propertiesFile = proj.getFile("config/configuration.properties");
        if (!yamlFile.exists) {
			error('File' + yamlFile.toString() +' has not been found', include, null);
	    }else if (!propertiesFile.exists){
	    	error('File' + propertiesFile.toString() +' has not been found', include, null);
	    }else{
	    	 val yp = new YamlProperties(); 
	    	 val array = yp.mainFunction(yamlFile, propertiesFile);
	    	 for (str:array){
	    	 	error(str, include, null);
	    	 }
	    }
	   
	}
}